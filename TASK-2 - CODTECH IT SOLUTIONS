ENTIRE CODE:

<!DOCTYPE html>
<html lang="en">

<head>
    <!-- Document metadata -->
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Title of the document -->
    <title>Weather App</title>
    <!-- Link to external stylesheet -->
    <link rel="stylesheet" href="style.css">
    <!-- Link to BoxIcons CSS library -->
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
</head>

<body>
    <!-- Main container for the weather app -->
    <div class="container">
        <!-- Search box for entering location -->
        <div class="search-box">
            <!-- Icon for location -->
            <i class='bx bxs-map' ></i>
            <!-- Input field for entering location -->
            <input type="text" placeholder="Enter your location">
            <!-- Button to trigger search -->
            <button class="bx bx-search-alt-2"></button>
        </div>
        <!-- Placeholder for hiding the city -->
        <p class="city-hide">city hide</p>
        <!-- Container for displaying weather information -->
        <div class="weather-box">
            <div class="box">
                <!-- Container for weather details -->
                <div class="info-weather">
                    <!-- Container for weather icon, temperature, and description -->
                    <div class="weather">
                        <!-- Icon representing weather condition -->
                        <img src="images/cloud.png" alt="">
                        <!-- Temperature -->
                        <p class="temperature">0<span>°C</span></p>
                        <!-- Description of weather condition -->
                        <p class="description">Broken Clouds</p>
                    </div>
                </div>
            </div>
        </div>
        <!-- Container for displaying additional weather details -->
        <div class="weather-details">
            <!-- Humidity section -->
            <div class="humidity">
                <!-- Icon for humidity -->
                <i class='bx bx-water' ></i>
                <!-- Text content for humidity -->
                <div class="text">
                    <!-- Container for humidity percentage -->
                    <div class="info-humidity">
                        <span>0%</span>
                    </div>
                    <!-- Label for humidity -->
                    <p>Humidity</p>
                </div>
            </div>
            <!-- Wind speed section -->
            <div class="wind">
                <!-- Icon for wind speed -->
                <i class='bx bx-wind' ></i>
                <!-- Text content for wind speed -->
                <div class="text">
                    <!-- Container for wind speed value -->
                    <div class="info-wind">
                        <span>0km/h</span>
                    </div>
                    <!-- Label for wind speed -->
                    <p>Wind Speed</p>
                </div>
            </div>
        </div>
        <!-- Placeholder for displaying error message when location is not found -->
        <div class="not-found">
            <!-- Box for error message -->
            <div class="box">
                <!-- Image for error illustration -->
                <img src="images/404.png" alt="">
                <!-- Error message -->
                <p>Oops! Location not found!</p>
            </div>
        </div>
    </div>
    <!-- JavaScript file for handling user interactions and fetching weather data -->
    <script src="script.js"></script>
</body>

</html>

// Selecting necessary DOM elements
const container = document.querySelector('.container');
const search = document.querySelector('.search-box button');
const weatherBox = document.querySelector('.weather-box');
const weatherDetails = document.querySelector('.weather-details');
const error404 = document.querySelector('.not-found');
const cityHide = document.querySelector('.city-hide');

// Event listener for the search button
search.addEventListener('click', () => {
    // API key for OpenWeatherMap
    const APIkey = 'a9cf3707624c86a1175af3ba1afc4a94';
    // Getting the value entered in the search input field
    const city = document.querySelector('.search-box input').value;

    // If the search input is empty, return without doing anything
    if (city == '')
        return;

    // Fetching weather data from OpenWeatherMap API
    fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${APIkey}`)
    .then(response => response.json()).then(json => {
        // If the city is not found, display error message
        if (json.cod == '404'){
            cityHide.textContent = city;
            container.style.height = '400px';
            weatherBox.classList.remove('active');
            weatherDetails.classList.remove('active');
            error404.classList.add('active');
            return;
        }

        // Extracting weather information from the JSON response
        const image = document.querySelector('.weather-box img');
        const temperature = document.querySelector('.weather-box .temperature');
        const description = document.querySelector('.weather-box .description');
        const humidity = document.querySelector('.weather-details .humidity span');
        const wind = document.querySelector('.weather-details .wind span');

        // If the searched city is the same as the current city, do nothing
        if (cityHide.textContent == city ){
            return;
        }
        else{
            // Update the city information and display weather details
            cityHide.textContent = city;
            container.style.height = '555px';
            container.classList.add('active');
            weatherBox.classList.add('active');
            weatherDetails.classList.add('active');
            error404.classList.remove('active');

            // Hide the container after a delay
            setTimeout(() => {
                container.classList.remove('active');
            }, 2500);

            // Set weather icon based on weather condition
            switch (json.weather[0].main) {
                case 'Clear':
                    image.src = 'images/clear.png';   
                    break;
                case 'Rain':
                    image.src = 'images/rain.png';   
                    break;
                case 'Snow':
                    image.src = 'images/snow.png';   
                    break;
                case 'Clouds':
                    image.src = 'images/cloud.png';   
                    break;
                case 'Mist':
                    image.src = 'images/mist.png';   
                    break;    
                case 'Haze':
                    image.src = 'images/snow.png';   
                    break;
                default:
                    image.src ='images/cloud.png';
            }

            // Update temperature, description, humidity, and wind speed
            temperature.innerHTML = `${parseInt(json.main.temp)}<span>°C</span>`;
            description.innerHTML = `${json.weather[0].description}`;
            humidity.innerHTML = `${json.main.humidity}%`;
            wind.innerHTML = `${parseInt(json.wind.speed)}km/h`;

            // Clone and animate weather details for a better user experience
            const infoWeather = document.querySelector('.info-weather');
            const infoHumidity = document.querySelector('.info-humidity');
            const infoWind = document.querySelector('.info-wind');

            const elCloneInfoWeather = infoWeather.cloneNode(true);
            const elCloneInfoHumidity = infoHumidity.cloneNode(true);
            const elCloneInfoWind = infoWind.cloneNode(true);

            elCloneInfoWeather.id = 'clone-info-weather';
            elCloneInfoWeather.classList.add('active-clone');
            elCloneInfoHumidity.id = 'clone-info-humidity';
            elCloneInfoHumidity.classList.add('active-clone');
            elCloneInfoWind.id = 'clone-info-wind';
            elCloneInfoWind.classList.add('active-clone');

            setTimeout(() => {
                infoWeather.insertAdjacentElement("afterend", elCloneInfoWeather);
                infoHumidity.insertAdjacentElement("afterend", elCloneInfoHumidity);
                infoWind.insertAdjacentElement("afterend", elCloneInfoWind);
            },2200);

            const cloneInfoWeather = document.querySelectorAll('.info-weather.active-clone');
            const totalCloneInfoWeather = cloneInfoWeather.length;
            const cloneInfoWeatherFirst = cloneInfoWeather[0];
            const cloneInfoHumidity = document.querySelectorAll('.info-humidity.active-clone');
            const cloneInfoHumidityFirst = cloneInfoHumidity[0];
            const cloneInfoWind = document.querySelectorAll('.info-wind.active-clone');
            const cloneInfoWindFirst = cloneInfoWind[0];

            if(totalCloneInfoWeather > 0){
                cloneInfoWeatherFirst.classList.remove('active-clone');
                cloneInfoHumidityFirst.classList.remove('active-clone');
                cloneInfoWindFirst.classList.remove('active-clone');

                setTimeout(() => {
                    cloneInfoWeatherFirst.remove();
                    cloneInfoHumidityFirst.remove();
                    cloneInfoWindFirst.remove();
                }, 2200);
            }
        }
    });
});
